1. Analyze function complexity
void func(int[] A, int low, int high)
{
    int i = low;        
    int j = high;       
    int x = A[(low+high)/2]; 

    
    do {
        
        while(A[i] < x) ++i;    // at worst case it is O(n)
        while(A[j] > x) --j;    // at worst case it is O(n)
        if(i <= j)
        {
            int temp = A[i];
            A[i] = A[j];
            A[j] = temp;
            
            i++; 
            j--;
        }
    } while(i < j); // overall complexity of this section O(n)

    if(low < j)             //recursive at best case O(log n) in assumption pivot divide perfectly into half; O(log n) * O(n)( this is based on function)
        func(A, low, j);    // we get O(n log n); at worst for already sorted array couse from recursive we got O(n) * O(n) <-- this is from function
                            // so we get O(n^2)
    
    if(i < high)            //same here
        func(A, i, high);
}


2. Pick the container for storing data of telephone book. It should allow to search the data about a person by his
phone number. Explain why you chose this container. Explanation should contain list of container operations and their
complexity in O notation.

I would choose hash map , where value is person data and key is phone number.
It offers most operations that are needed.
We can have case where 1 person can have more that one number and with some extra space it is managable in hash map.

operations: 
insertion (at worst O(n), best O(1)), 
deletion (at worst O(n), best O(1)),
search (at worst O(n), best O(1))